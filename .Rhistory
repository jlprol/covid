c2<- raw_data %>%
filter(areacode %in% c("10YAT-APG------L", # AT
"10Y1001A1001A83F")) %>%  # DE
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(datetime = as.POSIXct(datetime, tz = "UTC")) %>%
mutate(local_datetime = format(datetime, tz= "Europe/Berlin")) %>%
mutate(date = as.Date(substr(local_datetime, 1, 10))) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
c2
c3<- raw_data %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(date = as.POSIXct(datetime, tz = "UTC")) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
c3
c3<- raw_data %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(datetime = as.POSIXct(datetime, tz = "UTC")) %>%
mutate(date = as.Date(substr(datetime, 1, 10))) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
e_final<- c1 %>% filter(country == "FR") %>%
ggplot(aes(date, load)) + geom_line() +
labs(x = "", y = "", subtitle = "Corrected data") +
mytheme()
c1
load<- bind_rows(c1, c2, c3) %>% mutate(country = as.factor(country)) %>% arrange(country, date)
ggplot(load, aes(date, load, color = country)) + geom_line()
saveRDS(load, paste("D:/data/ENTSO-E/load/actual/daily/2020_5_dload.rds", sep = ""))
proba<- may %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(date = as.POSIXct(datetime, tz = "UTC")) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
e_original<- ggplot(proba, aes(date, load)) + geom_line() +
labs(x = "", y = "", subtitle = "Original data") +
mytheme()
e_original
proba<- may %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(date = as.POSIXct(datetime, tz = "UTC")) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
proba
c3
# UK has different local time
c3<- may %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(datetime = as.POSIXct(datetime, tz = "UTC")) %>%
mutate(date = as.Date(substr(datetime, 1, 10))) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
c3
raw_data
may
may<- read.csv("D:/data/ENTSO-E/load/actual/raw/2020_5_ActualTotalLoad.csv",
sep = "\t", header = T, fileEncoding = "UTF-16")
proba<- may %>%
filter(areacode == "10YGB----------A") %>% #UK
select(year = Year, month = Month, day = Day, datetime = DateTime, country = MapCode,
load = TotalLoadValue) %>%
mutate(date = as.POSIXct(datetime, tz = "UTC")) %>%
group_by(country, date) %>% summarise(load = sum(load)/1000) %>%
droplevels() %>% ungroup() %>% as_tibble()
e_original<- ggplot(proba, aes(date, load)) + geom_line() +
labs(x = "", y = "", subtitle = "Original data") +
mytheme()
e_original
e_zoom<- proba %>% filter(date > "2020-05-21") %>%
ggplot(aes(date, load)) + geom_line() +
labs(x = "", y = "", subtitle = "Data anomaly") +
mytheme()
e_zoom
View(proba)
# manually select arima order
get_arima_results<- function(where = "ES", k = NULL, j = 3, p = 1, d = 1, q = 1){ # if k is set no automatic selection (which takes long time)
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
Sys.info()
Sys.info
session_info()
sessionInfo()
ddata<- readRDS("./data/clean/ddata.rds") %>% filter(date <= "2020-04-30") %>% unique()
mylist<- list()
############# 4.1 AT ############
# arima
get_arima_results(where = "AT", j = 3, k = 20, p = 5, d = 1, q = 1)
atlist<- readRDS("./data/results/forecast_manual/results_AT.rds")
# nnar
# get_nnar_results(where = "AT")
# atlist<- readRDS("./data/results/forecast_nnar/results_AT.rds")
at_fit<- atlist$fit
checkresiduals(at_fit)
coeftest(at_fit)
at_result<- atlist$result %>% mutate(wday = weekdays(date))
sunday<- at_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
atplot<- ggplot(at_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#21908CFF", alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#21908CFF", alpha = .15) +
geom_line(color = "#21908CFF") + geom_point(color = "#21908CFF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-16"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-16"), y = -25, label = "Lockdown", hjust = 1) +
# annotate("text", x = as.Date("2020-03-02"), y = -33, label = "-8%", color = "#21908CFF", hjust = 0) +
#â€¢annotate("text", x = as.Date("2020-03-02"), y = -33, label = "2.9*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 10)) +
labs(x = element_blank(), y = element_blank(), title = "Austria") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(atplot, "./figures/at.png")
atplot2<- ggplot(at_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#21908CFF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-16"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Austria") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(atplot2, "./figures/at2.png")
atplot3<- ggplot(at_result, aes(date, fct)) +
geom_line() +
geom_line(aes(date, actual),  color = "#21908CFF", size = 1) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplotly(atplot3)
############# 4.2 CA ############
# arima
get_arima_results(where = "CA", j = 3, k = 3, p = 4, d = 1, q = 3)
calist<- readRDS("./data/results/forecast_manual/results_CA.rds")
# nnar
# get_nnar_results(where = "CA")
# calist<- readRDS("./data/results/forecast_nnar/results_CA.rds")
ca_fit<- calist$fit
checkresiduals(ca_fit)
coeftest(ca_fit)
ca_result<- calist$result
sunday<- ca_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
caplot<- ggplot(ca_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#AADC32FF", alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#AADC32FF", alpha = .15) +
geom_line(color = "#AADC32FF") + geom_point(color = "#AADC32FF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-19"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-19"), y = -15, label = "Stay-home", hjust = 1) +
#annotate("text", x = as.Date("2020-03-02"), y = -23, label = "1.8*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-25, 10)) +
labs(x = element_blank(), y = element_blank(), title = "California") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(caplot, "./figures/ca.png")
caplot2<- ggplot(ca_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#AADC32FF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-19"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "California") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(caplot2, "./figures/ca2.png")
# check fitted
check<- data.frame(fitted = ca_fit$fitted,
act = calist$train$load,
date = calist$train$date) %>% gather(key, value, -date)
check %>% filter(date >= "2020-01-01") %>%
ggplot(aes(date, value, color = key)) + geom_line() + geom_point()
############# 4.3 DE ############
get_arima_results(where = "DE", j = 3, k = 30, p = 4, d = 1, q = 1) # get_results2(where = "DE")
delist<- readRDS("./data/results/forecast_manual/results_DE.rds")
de_fit<- delist$fit
checkresiduals(de_fit)
coeftest(de_fit)
de_result<- delist$result
sunday<- de_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
deplot<- ggplot(de_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#5DC863FF", alpha = .25) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#5DC863FF", alpha = .2) +
geom_line(color ="#5DC863FF") + geom_point(color = "#5DC863FF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-22"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-22"), y = -15, label = "Lockdown", hjust = 1) +
#annotate("text", x = as.Date("2020-03-02"), y = -23, label = "1.8*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-25, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Germany") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(deplot, "./figures/de.png")
deplot2<- ggplot(de_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#5DC863FF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-22"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Germany") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(deplot2, "./figures/de2.png")
############# 4.4 ES ############
get_arima_results(where = "ES", j=3, k = 23, p = 3, d = 1, q = 2) # get_results2(where = "ES")
eslist<- readRDS("./data/results/forecast_manual/results_ES.rds")
es_fit<- eslist$fit
checkresiduals(es_fit)
coeftest(es_fit)
es_result<- eslist$result
sunday<- es_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
esplot<- ggplot(es_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#3B528BFF", alpha = .1) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#3B528BFF", alpha = .05) +
geom_line(color = "#3B528BFF") + geom_point(color = "#3B528BFF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-15"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-03-30"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-04-14"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-15"), y = -30, label = "Lockdown", hjust = 1) +
annotate("text", x = as.Date("2020-03-30"), y = -30, label = "Halt \n activity", hjust = 1) +
annotate("text", x = as.Date("2020-04-14"), y = -30, label = "Resume \n activity", hjust = 0) +
#annotate("text", x = as.Date("2020-03-02"), y = -43, label = "1.63*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-45, 10)) +
labs(x = element_blank(), y = element_blank(), title = "Spain") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(esplot, "./figures/es.png")
esplot2<- ggplot(es_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#3B528BFF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-15"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-03-30"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-04-14"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Spain") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(esplot2, "./figures/es2.png")
############# 4.5 FL ############
get_arima_results(where = "FL", j = 3, k = 3, p = 1, d = 1, q = 2) # get_results2(where = "FL")
fllist<- readRDS("./data/results/forecast_manual/results_FL.rds")
# nnar
# get_nnar_results(where = "FL")
# fllist<- readRDS("./data/results/forecast_nnar/results_FL.rds")
fl_fit<- fllist$fit
checkresiduals(fl_fit)
coeftest(fl_fit)
fl_result<- fllist$result
sunday<- fl_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
flplot<- ggplot(fl_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#FDE725FF", alpha = .25) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#FDE725FF", alpha = .2) +
geom_line(color = "#FDE725FF", size = 1) + geom_point(color = "#FDE725FF", size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-04-03"), linetype = "dotted") +
annotate("text", x = as.Date("2020-04-03"), y = -20, label = "Stay-home", hjust = 1) +
#annotate("text", x = as.Date("2020-03-02"), y = -23, label = "2.71*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-25, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Florida") +
mytheme()+ theme(plot.title = element_text(hjust = 0.5))
write.png(flplot, "./figures/fl.png")
flplot2<- ggplot(fl_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#FDE725FF", size = 1) +
geom_vline(xintercept = as.Date("2020-04-03"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Florida") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(flplot2, "./figures/fl2.png")
############# 4.6 FR ############
get_arima_results(where = "FR", j = 3, k = 19, p = 7, d = 1, q = 6)
frlist<- readRDS("./data/results/forecast_manual/results_FR.rds")
# nnar
# get_nnar_results(where = "FR")
# frlist<- readRDS("./data/results/forecast_nnar/results_FR.rds")
fr_fit<- frlist$fit
checkresiduals(fr_fit)
coeftest(fr_fit)
fr_result<- frlist$result
sunday<- fr_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
frplot<- ggplot(fr_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#472D7BFF", alpha = .1) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#472D7BFF", alpha = .05) +
geom_line(color = "#472D7BFF") + geom_point(color = "#472D7BFF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-17"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-17"), y = -20, label = "Lockdown", hjust = 1.1) +
#annotate("text", x = as.Date("2020-03-02"), y = -43, label = "2.29*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-45, 10)) +
labs(x = element_blank(), y = element_blank(), title = "France") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(frplot, "./figures/fr.png")
frplot2<- ggplot(fr_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#472D7BFF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-17"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "France") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(frplot2, "./figures/fr2.png")
############# 4.7 GB ############
get_arima_results(where = "GB",j = 3, k = 19, p = 2, d = 1, q = 3) # get_results2(where = "UK")
gblist<- readRDS("./data/results/forecast_manual/results_GB.rds")
gb_fit<- gblist$fit
checkresiduals(gb_fit)
coeftest(gb_fit)
gb_result<- gblist$result
sunday<- gb_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
gbplot<- ggplot(gb_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#2C728EFF", alpha = .1) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#2C728EFF", alpha = .05) +
geom_line(color = "#2C728EFF") + geom_point(color = "#2C728EFF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-23"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-23"), y = -20, label = "Lockdown", hjust = 1) +
#annotate("text", x = as.Date("2020-03-02"), y = -33, label = "2.05*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 10)) +
labs(x = element_blank(), y = element_blank(), title = "Great Britain") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(gbplot, "./figures/gb.png")
gbplot2<- ggplot(gb_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#2C728EFF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-23"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Great Britain") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(gbplot2, "./figures/gb2.png")
############# 4.8 IT ############
get_arima_results(where = "IT", j = 3, k = 21, p = 2, d = 1, q = 1)
itlist<- readRDS("./data/results/forecast_manual/results_IT.rds")
it_fit<- itlist$fit
checkresiduals(it_fit)
coeftest(it_fit)
it_result<- itlist$result
sunday<- it_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
itplot<- ggplot(it_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), alpha = .1, fill = "#440154FF") +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), alpha = .05, fill = "#440154FF") +
geom_line(color = "#440154FF") + geom_point(color = "#440154FF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-10"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-03-21"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-04-14"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-10"), y = 8, label = "Lockdown", hjust = 0) +
annotate("text", x = as.Date("2020-03-21"), y = 8,label = "Halt \n activity", hjust = 0) +
annotate("text", x = as.Date("2020-04-14"), y = 8, label = "Resume \n activity", hjust = 0) +
annotate("text", x = as.Date("2020-03-08"), y = -22, label = "Sunday",  color = "darkgrey") +
#annotate("text", x = as.Date("2020-03-02"), y = -43, label = "2.33*", hjust = 0) +
geom_segment(aes(x = as.Date("2020-03-08"), y = 0, xend = as.Date("2020-03-08"),
yend = -20), color = "darkgrey") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-45, 10)) +
labs(x = element_blank(), y = element_blank(), title = "Italy") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(itplot, "./figures/it.png")
itplot2<- ggplot(it_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#440154FF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-10"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-03-21"), linetype = "dotted") +
geom_vline(xintercept = as.Date("2020-04-14"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Italy") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(itplot2, "./figures/it2.png")
############# 4.9 NY ############
get_arima_results(where = "NY", j = 3, k = 5, p = 3, d = 1, q = 1)
nylist<- readRDS("./data/results/forecast_manual/results_NY.rds")
# nnar
# get_nnar_results(where = "NY")
# nylist<- readRDS("./data/results/forecast_nnar/results_NY.rds")
ny_fit<- nylist$fit
checkresiduals(ny_fit)
coeftest(ny_fit)
ny_result<- nylist$result
sunday<- ny_result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
nyplot<- ggplot(ny_result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = "#27AD81FF", alpha = .25) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = "#27AD81FF", alpha = .2) +
geom_line(color = "#27AD81FF") + geom_point(color = "#27AD81FF") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-03-22"), linetype = "dotted") +
annotate("text", x = as.Date("2020-03-22"), y = -25, label = "Stay-home", hjust = 1) +
#annotate("text", x = as.Date("2020-03-02"), y = -32, label = "1.63*", hjust = 0) +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 10)) +
labs(x = element_blank(), y = element_blank(), title = "New York") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(nyplot, "./figures/ny.png")
nyplot2<- ggplot(ny_result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = "#27AD81FF", size = 1) +
geom_vline(xintercept = as.Date("2020-03-22"), linetype = "dotted") +
labs(x = element_blank(), y = "Daily consumption (GWh)", title = "New York") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
write.png(nyplot2, "./figures/ny2.png")
### 4.10. Combined #####
dplots<- list(itplot, frplot, esplot, gbplot, atplot,  nyplot, deplot, caplot, flplot)
# saveRDS(dplots, "./data/results/dplots.rds")
tiff("./figures/combined.tiff",
height = 22, width = 31, units = "cm",
compression = "lzw", res = 300)
combined <- grid.arrange(itplot, frplot, esplot, gbplot, atplot,  nyplot, deplot, caplot, flplot, ncol=3,
left = "Daily percent change in electricity consumption (%)")
combined
dev.off()
# caption manual outside figure
# bottom =  textGrob("*Training set mean average percentage error.
# Baseline: country-specific dynamic harmonic regression with quadratic temperature,
# calendar effects, Fourier terms for complex seasonality and ARIMA(p,d,q) errors.
# Dark and light shades indicate 80% and 95% prediction intervals respectively.
# Sundays are  colored grey. Note that vertical axis scales are different for each row.",
# gp = gpar(fontsize = 10))
dplots2<- list(itplot2, frplot2, esplot2, gbplot2, atplot2,  nyplot2, deplot2, caplot2, flplot2)
# saveRDS(dplots2, "./data/results/dplots2.rds")
tiff("./figures/combined2.tiff",
height = 22, width = 31, units = "cm",
compression = "lzw", res = 300)
combined <- grid.arrange(itplot2, frplot2, esplot2, gbplot2, atplot2,  nyplot2, deplot2,
caplot2, flplot2, ncol=3,
left = "Daily electricity consumption (GWh)")
combined
dev.off()
# merge diff results
dif_results<- bind_rows(at_result, ca_result, de_result, es_result, fl_result,
fr_result, gb_result, it_result, ny_result)
# saveRDS(dif_results, "./data/results/dif_results.rds")
############# 4.11. Cumulative ###############
atc<- at_result %>% filter(date >= "2020-03-15") %>% mutate(t = 0:(length(date)-1))
cac<- ca_result %>% filter(date >= "2020-03-18") %>% mutate(t = 0:(length(date)-1))
dec<- de_result %>% filter(date >= "2020-03-21") %>% mutate(t = 0:(length(date)-1))
esc<- es_result %>% filter(date >= "2020-03-13") %>% mutate(t = 0:(length(date)-1))
flc<- fl_result %>% filter(date >= "2020-04-02") %>% mutate(t = 0:(length(date)-1))
frc<- fr_result %>% filter(date >= "2020-03-16") %>% mutate(t = 0:(length(date)-1))
gbc<- gb_result %>% filter(date >= "2020-03-22") %>% mutate(t = 0:(length(date)-1))
itc<- it_result %>% filter(date >= "2020-03-09") %>% mutate(t = 0:(length(date)-1))
nyc<- ny_result %>% filter(date >= "2020-03-21") %>% mutate(t = 0:(length(date)-1))
cum_results<- bind_rows(atc, cac, dec, esc, flc, frc, gbc, itc, nyc) %>%
arrange(country, t) %>% select(country, t, date, actual, fct, dif) %>%
group_by(country) %>%
mutate(index = 100*cumsum(actual)/cumsum(fct),
index = ifelse(t == 0, 100, index),
index_pc = index-100)
# saveRDS(cum_results, "./data/results/cum_results.rds")
cum_results<- readRDS("./data/results/cum_results.rds")
legend<- cum_results %>% summarize(t = max(t), index = last(index), index_pc = last(index_pc))
legend %>% arrange(index_pc)
my_colors <- RColorBrewer::brewer.pal(4, "Blues")[2:4]
cumplot<- ggplot(cum_results, aes(t, index_pc, color = fct_reorder(country, index, .fun='last'))) +
geom_line(size = 1, alpha = 1.5) +
geom_point(data = legend, aes(x = t, y = index_pc)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_text_repel(data = legend, aes(x = t, y = index_pc, label = country,
color = country, hjust = .1, vjust = -.1)) +
scale_color_viridis_d() +
scale_y_continuous(sec.axis = sec_axis(~ .)) +
labs(x = "Days from lockdown", y = "Cumulative consumption change (%)") +
mytheme() + theme(legend.position = "none")
