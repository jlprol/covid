geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
geom_vline(xintercept = as.Date("2020-03-16"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
geom_vline(xintercept = as.Date("2020-03-16"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
geom_vline(xintercept = as.Date("2020-03-16"), linetype = "dotted") +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
# resultados manuais
get_arima_results<- function(where = "BG", k = NULL, j = 3, p = 2, d = 1, q = 1){
ddata<- readRDS("./data/clean/ddata_all2.rds")
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
# resultados manuais
get_arima_results<- function(where = "ES", k = NULL, j = 3, p = 1, d = 1, q = 1){
ddata<- readRDS("./data/clean/ddata_all2.rds")
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
get_arima_results<- function(where = "ES", k = NULL, j = 3, p = 1, d = 1, q = 1){
ddata<- readRDS("./data/clean/ddata_all2.rds")
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
get_arima_results(where = "BG", j = 3, k = 11, p = 2, d = 1, q = 1)
list<- readRDS("./data/results/forecast_manual/results_AT.rds")
list$k
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
result<- list$result %>% mutate(wday = weekdays(date))
result$lockdown<- as.Date("2020-03-16")
sunday<- result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
plot<- ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
get_arima_results(where = "BG", j = 3, k = 11, p = 2, d = 1, q = 1)
ddata<- readRDS("./data/clean/ddata_all2.rds")
ddata %>% filter(country == "BG")
get_arima_results_ext<- function(where = "ES", k = NULL, j = 3, p = 1, d = 1, q = 1){
raw<- readRDS("./data/clean/ddata_all2.rds") %>% filter(country == co) %>%
select(country, date, load, wday, sunday)
temp<- read.delim(paste("./data/raw/temperature/", co, "_maxtemp.dat", sep = ""), sep = ",") %>%
rename(date = day, max_temp = maxT) %>% mutate(date = as.Date(date), country = co) %>% as_tibble()
holiday<- readRDS("./data/clean/ddata_all.rds") %>% filter(country == "FR") %>%
select(country, date, holiday) %>% mutate(country = co)
ddata<- left_join(raw, holiday) %>% left_join(temp)
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 2, d = 1, q = 1)
list<- readRDS("./data/results/forecast_manual/results_AT.rds")
co = "BG"
raw<- readRDS("./data/clean/ddata_all2.rds") %>% filter(country == co) %>%
select(country, date, load, wday, sunday)
raw
temp<- read.delim(paste("./data/raw/temperature/", co, "_maxtemp.dat", sep = ""), sep = ",") %>%
rename(date = day, max_temp = maxT) %>% mutate(date = as.Date(date), country = co) %>% as_tibble()
temp
holiday<- readRDS("./data/clean/ddata_all.rds") %>% filter(country == "FR") %>%
select(country, date, holiday) %>% mutate(country = co)
holiday
ddata<- left_join(raw, holiday) %>% left_join(temp)
ddata
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
where<- "BG"
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
train
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
train_msts
get_arima_results_ext<- function(where = "ES", k = NULL, j = 3, p = 1, d = 1, q = 1){
raw<- readRDS("./data/clean/ddata_all2.rds") %>% filter(country == co) %>%
select(country, date, load, wday, sunday)
temp<- read.delim(paste("./data/raw/temperature/", co, "_maxtemp.dat", sep = ""), sep = ",") %>%
rename(date = day, max_temp = maxT) %>% mutate(date = as.Date(date), country = co) %>% as_tibble()
holiday<- readRDS("./data/clean/ddata_all.rds") %>% filter(country == "FR") %>%
select(country, date, holiday) %>% mutate(country = co)
ddata<- left_join(raw, holiday) %>% left_join(temp)
# define train (4 years 2015-2018) and test (1 year 2019) sets
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
test<- ddata %>% filter(country == where, date >= "2020-03-01") %>% na.omit()
# convert into multiple (weekly and yearly) seasonality time series (msts)
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
test_msts<- msts(test$load, seasonal.periods = c(7, 365.25)) %>% na.omit()
lambda<- BoxCox.lambda(train_msts)
# calculate fourier term
harmonic<- fourier(train_msts, K = c(j, k))
# run model
fit <- Arima(train_msts,
xreg = cbind(train$max_temp, train$max_temp^2,
as.factor(train$holiday), harmonic),
lambda = lambda, order = c(p,d,q))
# forecast fourier term and other control variables
test_harmonic<- fourier(train_msts, K = c(j, k), h = length(test_msts))
# forecast
fct<- forecast(fit, xreg = cbind(test$max_temp, test$max_temp^2,
as.factor(test$holiday), test_harmonic))
result<- data.frame(date = test$date,
actual = test$load,
fct = as.numeric(fct$mean),
low80 = as.numeric(fct$lower[, 1]),
low95 = as.numeric(fct$lower[, 2]),
up80 = as.numeric(fct$upper[, 1]),
up95 = as.numeric(fct$upper[, 2])) %>%
mutate(dif = (100*(actual-fct))/actual,
diflow80 = (100*(actual-low80))/actual,
diflow95 = (100*(actual-low95))/actual,
difup80 = (100*(actual-up80))/actual,
difup95 = (100*(actual-up95))/actual,
country = where) %>% as_tibble()
mylist<<- list(fit = fit,
forecast = fct,
k = k,
lambda = lambda,
train = train,
test = test,
result = result)
saveRDS(mylist, paste("./data/results/forecast_manual/results_", where, ".rds", sep = ""))
return(round(c(k, lambda),2))
}
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 2, d = 1, q = 1)
list<- readRDS("./data/results/forecast_manual/results_AT.rds")
list$k
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
list$k
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
get_accuracy(where = "BG", k = list$k)
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 2, d = 1, q = 2)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 2, d = 0, q = 2)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
get_accuracy(where = "BG", k = list$k)
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 4, d = 1, q = 4)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
labs(x = element_blank(), y = element_blank(), title = "Bulgaria") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 4, d = 0, q = 4)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
############# 5.2. CH ############
# arima
# resultados automáticos
list<- readRDS("./data/results/forecast/results_CH.rds") # (2,0,1) k = 11 MAPE = 5.29
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
summary(fit)
get_arima_results_ext(where = "CZ", j = 3, k = 10, p = 2, d = 1, q = 3)
list<- readRDS("./data/results/forecast_manual/results_BG.rds")
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
coeftest(fit)
summary(fit)
get_arima_results_ext(where = "CH", j = 3, k = 10, p = 2, d = 1, q = 3)
list<- readRDS("./data/results/forecast_manual/results_CH.rds")
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
summary(fit)
coeftest(fit)
# resultados manuais
get_arima_results_ext(where = "CH", j = 3, k = 10, p = 2, d = 1, q = 3)
# resultados manuais
get_arima_results_ext(where = "CH", j = 3, k = 10, p = 2, d = 1, q = 3)
get_arima_results_ext(where = "BG", j = 3, k = 11, p = 4, d = 0, q = 4)
get_arima_results_ext(where = "CH", j = 3, k = 10, p = 2, d = 1, q = 3)
co == "CH"
co = "CH"
where = "CH"
raw<- readRDS("./data/clean/ddata_all2.rds") %>% filter(country == co) %>%
select(country, date, load, wday, sunday)
raw
temp<- read.delim(paste("./data/raw/temperature/", co, "_maxtemp.dat", sep = ""), sep = ",") %>%
rename(date = day, max_temp = maxT) %>% mutate(date = as.Date(date), country = co) %>% as_tibble()
temp
holiday<- readRDS("./data/clean/ddata_all.rds") %>% filter(country == "FR") %>%
select(country, date, holiday) %>% mutate(country = co)
holiday
ddata<- left_join(raw, holiday) %>% left_join(temp)
ddata
train<- ddata %>% filter(country == where, date < "2020-03-01") %>% na.omit()
train
train_msts<- msts(train$load, seasonal.periods = c(7, 365.25))
train_msts
# resultados manuais
get_arima_results_ext(where = "CH", j = 3, k = 10, p = 2, d = 1, q = 3)
list<- readRDS("./data/results/forecast_manual/results_CH.rds")
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
summary(fit)
coeftest(fit)
############# 5.2. CH ############
# arima
# resultados automáticos
list<- readRDS("./data/results/forecast/results_CH.rds") # (1,1,3) k = 10 MAPE = 4.41
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
summary(fit)
coeftest(fit)
result<- list$result %>% mutate(wday = weekdays(date))
result$lockdown<- as.Date("2020-03-16")
sunday<- result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
plot<- ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Switzerland") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
plot
ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
#coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Switzerland") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
labs(x = element_blank(), y = element_blank(), title = "Switzerland") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
############# 5.2. CH ############
# arima
# resultados automáticos
list<- readRDS("./data/results/forecast/results_CH.rds") # (1,1,3) k = 10 MAPE = 4.41
list$k
list$lambda
fit<- list$fit
checkresiduals(fit)
summary(fit)
coeftest(fit)
result<- list$result %>% mutate(wday = weekdays(date))
result$lockdown<- as.Date("2020-03-16")
sunday<- result %>% mutate(wday = weekdays(date)) %>% filter(wday == "Sunday")
plot<- ggplot(result, aes(date, dif)) +
geom_ribbon(aes(date, ymin = diflow80, ymax = difup80), fill = viridis_col[6], alpha = .2) +
geom_ribbon(aes(date, ymin = diflow95, ymax = difup95), fill = viridis_col[6], alpha = .15) +
geom_line(color = viridis_col[6]) + geom_point(color = viridis_col[6]) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_point(data = sunday, aes(date, dif), color = "darkgrey", size = 1.5) +
#coord_cartesian(ylim = c(-35, 15)) +
labs(x = element_blank(), y = element_blank(), title = "Switzerland") +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
plot
plot2
ggplot(result, aes(date, fct)) +
geom_line(size = .5) +
geom_ribbon(aes(date, ymin = low80, ymax = up80), alpha = .12) +
geom_ribbon(aes(date, ymin = low95, ymax = up95), alpha = .08) +
geom_line(aes(date, actual),  color = viridis_col[6], size = 1) +
labs(x = element_blank(), y = element_blank(), title = "Switzerland") +
# coord_cartesian(ylim= c(.4, .8)) +
mytheme() + theme(plot.title = element_text(hjust = 0.5))
